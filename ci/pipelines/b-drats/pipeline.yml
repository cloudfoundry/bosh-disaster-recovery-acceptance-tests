---
#!  WARNING: this pipeline is automatically set and manual changes will go away. 
#!
#!  To set pipeline manually run: 
#!    fly set-pipeline -p b-drats -c <(ytt -f ci/pipelines/b-drats/pipeline.yml --data-values-file ci/pipelines/b-drats/values.yml)

#@ load("@ytt:data", "data")

attempts: &number_of_retries 1
number_of_claim_env_retries: &number_of_claim_env_retries 5

#! ************************************
#! Secrets we need to run this pipeline
#! ************************************

github_token: &github_token ((github.access_token))
#! github_token was needed on 2023-09-05 to access PRs. Generated by using github account in lastpass.
github_ssh_key: &github_ssh_key ((github.ssh_key))
#! github_ssh_key was needed on 2023-09-05 to merge PRs. Generated by using github account in lastpass.
toolsmiths_api_token: &toolsmiths_api_token ((toolsmiths.api_token))
#! toolsmiths_api_token was needed on 2023-09-05 for claiming environments to run integration tests.
access_key_id: &access_key_id ((bbr/aws_s3_creds.access_key_id))
secret_access_key: &secret_access_key ((bbr/aws_s3_creds.secret_access_key))
aws_role_arn: &aws_role_arn ((bbr/aws_s3_creds.assumed_role_arn))
#! {access_key_id,secret_access_key,aws_role_arn} are credentials generated in CloudGate

#! **************
#! End of secrets
#! **************


groups:
- name: test
  jobs:
    - unclaim-env
    - merge-pr
    - run-b-drats
    - claim-env
- name: bump
  jobs:
    - bump-ci-tasks
    - bump-golang

resource_types:
- name: pcf-pool
  type: registry-image
  source:
    repository: cftoolsmiths/toolsmiths-envs-resource
    tag: latest

- name: pull-request
  type: docker-image
  source:
    repository: cryogenics/pr-queue-resource

resources:
- name: image-cryogenics-essentials
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cryogenics/essentials

- name: image-backup-restore
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pcfplatformrecovery/backup-and-restore

- name: golang-release
  type: git
  source:
    uri: https://github.com/bosh-packages/golang-release.git
    tag_filter: v*

- name: bbr-artefacts
  type: s3
  icon: aws
  source:
    bucket: bosh-backup-and-restore-builds
    region_name: eu-west-1
    regexp: bbr-(.*)\.tar
    access_key_id: *access_key_id
    secret_access_key: *secret_access_key
    aws_role_arn: *aws_role_arn

- name: jammy-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-jammy-go_agent

- name: cryogenics-ci
  type: git
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: *github_ssh_key
    branch: main

- name: env
  icon: pool
  type: pcf-pool
  source:
    api_token: *toolsmiths_api_token
    hostname: environments.toolsmiths.cf-app.com
    pool_name: #@ data.values.tas_versions[-1]["pool_name"]

- name: b-drats
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-disaster-recovery-acceptance-tests
    private_key: *github_ssh_key
    branch: master

#! A second resource is necessary for Golang bumps because when we push a branch
#! to this repo via this resourse, the subsequent get steps will start tracking
#! that branch, and not main as one would expect.
- name: b-drats-golang-bump
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-disaster-recovery-acceptance-tests
    private_key: *github_ssh_key

- name: bosh-disaster-recovery-acceptance-tests-prs
  icon: source-pull
  type: pull-request
  source:
    base_branch: master
    repository: cloudfoundry/bosh-disaster-recovery-acceptance-tests
    access_token: *github_token
    disable_forks: true
    autosync_pr: true
    watch_checks_interval: "600"
    assign_to: "@me"

- name: bosh-disaster-recovery-acceptance-tests
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry/bosh-disaster-recovery-acceptance-tests
    private_key: *github_ssh_key

- name: bosh-disaster-recovery-acceptance-tests-bump-ci-tasks
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-disaster-recovery-acceptance-tests
    private_key: *github_ssh_key

jobs:
- name: claim-env
  plan:
  - get: bosh-disaster-recovery-acceptance-tests-prs
    trigger: true
    version: every
  - put: env
    attempts: *number_of_claim_env_retries
    params:
      action: claim

- name: run-b-drats
  serial: true
  plan:
  - in_parallel:
    - get: bosh-disaster-recovery-acceptance-tests-prs
      passed:
        - claim-env
    - get: env
      trigger: true
      passed:
        - claim-env
    - get: cryogenics-ci
    - get: jammy-stemcell
    - get: bbr-artefacts
      params:
        unpack: true
    - get: image-cryogenics-essentials
    - get: image-backup-restore
  - in_parallel:
    - put: bosh-disaster-recovery-acceptance-tests-prs
      params:
        path: bosh-disaster-recovery-acceptance-tests-prs
        status: pending
        context: b-drats
    - task: create-b-drats-config
      file: cryogenics-ci/tasks/toolsmiths/generate-b-drats-config-from-tas-env/task.yml
      image: image-backup-restore
      input_mapping:
        repo: cryogenics-ci
        env: env
        stemcell: jammy-stemcell
      params:
        INCLUDE_DEPLOYMENT_TESTCASE: true
        INCLUDE_TRUNCATE_DB_BLOBSTORE_TESTCASE: true
        INCLUDE_CREDHUB_TESTCASE: true
        TIMEOUT_IN_MINUTES: 1_440  #! 24h as this is the lifetime of a Toolsmith env
      output_mapping:
        config: b-drats-config
    - load_var: env-metadata
      file: env/metadata
      format: json
  - task: run-b-drats
    attempts: *number_of_retries
    timeout: 24h
    privileged: true
    file: bosh-disaster-recovery-acceptance-tests-prs/ci/tasks/run-b-drats/task.yml
    image: image-cryogenics-essentials
    params:
      JUMPBOX_IP: ((.:env-metadata.ops_manager_public_ip))
      JUMPBOX_PRIVATE_KEY: ((.:env-metadata.ops_manager_private_key))
      JUMPBOX_USER: ubuntu
      BBR_BINARY: bbr-binary-release/releases/bbr
      SSH_ALIVE_INTERVAL: 60 #! in seconds
      GINKGO_TIMEOUT: 24h0m0s #! 48h to be consistent with TIMEOUT_IN_MINUTES in the b-drats test config from the previous task.
      SSHUTTLE_FLAGS: --disable-ipv6
    input_mapping:
      bbr-binary-release: bbr-artefacts
      bosh-disaster-recovery-acceptance-tests: bosh-disaster-recovery-acceptance-tests-prs
      b-drats-integration-config: b-drats-config
    on_failure:
      put: bosh-disaster-recovery-acceptance-tests-prs
      params:
        path: bosh-disaster-recovery-acceptance-tests-prs
        status: failure
        context: b-drats
    on_success:
      put: bosh-disaster-recovery-acceptance-tests-prs
      params:
        path: bosh-disaster-recovery-acceptance-tests-prs
        status: success
        context: b-drats

- name: merge-pr
  plan:
  - get: bosh-disaster-recovery-acceptance-tests-prs
    trigger: true
    passed:
      - run-b-drats
  - put: bosh-disaster-recovery-acceptance-tests-prs
    params:
      merge: true

- name: unclaim-env
  plan:
  - get: env
    trigger: true
    passed:
      - run-b-drats
  - put: env
    params:
      env_file: env/metadata
      action: unclaim

- name: bump-ci-tasks
  plan:
    - in_parallel:
      - get: image-cryogenics-essentials
        trigger: true
      - get: cryogenics-ci
      - get: bosh-disaster-recovery-acceptance-tests
    - in_parallel:
      - load_var: cryogenics-essentials-version
        file: image-cryogenics-essentials/tag
      - task: bump-tasks
        file: cryogenics-ci/deps-automation/bump-concourse-tasks/task.yml
        image: image-cryogenics-essentials
        input_mapping:
          repo: bosh-disaster-recovery-acceptance-tests
          image: image-cryogenics-essentials
        output_mapping:
          repo: bosh-disaster-recovery-acceptance-tests
        params:
          TASKS_FOLDER: ci/tasks/run-b-drats
    - put: bosh-disaster-recovery-acceptance-tests-bump-ci-tasks
      params:
        repository: bosh-disaster-recovery-acceptance-tests
        branch: &bump-ci-task-branch bump-cryogenics-essentials-to-v((.:cryogenics-essentials-version))
        force: true
    - task: create-pull-request
      file: cryogenics-ci/github-automation/create-pr/task.yml
      image: image-cryogenics-essentials
      params:
        BASE: master
        BRANCH: *bump-ci-task-branch
        LABELS: dependencies
        TITLE: Bump cryogenics/essentials to v((.:cryogenics-essentials-version))
        MESSAGE: |
          This is an automatically generated Pull Request from the Cryogenics CI Bot.
          I have detected a new version of [cryogenics/essentials](https://hub.docker.com/r/cryogenics/essentials/tags) and automatically bumped
          this package to benefit from the latest changes.
          If this does not look right, please reach out to the [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.
      input_mapping:
        source-repo: bosh-disaster-recovery-acceptance-tests-bump-ci-tasks
        cryogenics-concourse-tasks: cryogenics-ci

- name: bump-golang
  plan:
  - in_parallel:
    - get: cryogenics-concourse-tasks
      resource: cryogenics-ci
    - get: golang-release
      trigger: true
    - get: b-drats
      params:
        branch: main
    - get: image-cryogenics-essentials
  - task: update-go-directive
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    image: image-cryogenics-essentials
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: b-drats
    output_mapping:
      golang-project-repo: b-drats
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - put: b-drats-golang-bump
    params:
      repository: b-drats
      branch: &golang-vendor-branch bump-golang-vendor-((.:golang-release-version))
      force: true
  #! We use `try` here to make this Job idempotent. It is possible that between
  #! 2 runs nothing has changed in the inputs (no new versions) which will result
  #! in an attempt to create a PR with nothing new. This would make this step
  #! fail.
  - try:
      task: create-golang-vendor-pull-request
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      image: image-cryogenics-essentials
      params:
        BASE: master
        BRANCH: *golang-vendor-branch
        LABELS: dependencies
        TITLE: Bump golang-1-linux to version ((.:golang-release-version))
        MESSAGE: |
          This is an automatically generated Pull Request from the Cryogenics CI Bot.

          I have detected a new version of [golang-release](https://github.com/bosh-packages/golang-release) and automatically bumped
          this package to benefit from the latest changes.

          If this does not look right, please reach out to the [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.
      input_mapping:
        source-repo: b-drats-golang-bump
