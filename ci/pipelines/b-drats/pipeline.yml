---
#!  WARNING: this pipeline is automatically set and manual changes will go away. 
#!
#!  To set pipeline manually run: 
#!    fly set-pipeline -p b-drats -c <(ytt -f ci/pipelines/b-drats/pipeline.yml --data-values-file ci/pipelines/b-drats/values.yml)

#@ load("@ytt:data", "data")

attempts: &number_of_retries 1
number_of_claim_env_retries: &number_of_claim_env_retries 5

#! ************************************
#! Secrets we need to run this pipeline
#! ************************************

secrets:
#! gcr_viewer_key was needed on 2024-03-24 for getting concourse container images from our GCR instance. Generated by using personal creds to log into the mapbu-cryogenics google cloud project.
- &gcr_viewer_key  ((gcr.viewer_key))

#! shepherd_account_key was needed on 2023-09-28 to claim shepherd environments. It was created using `shepherd create service-account` after logging in with WS1.
- &shepherd_account_key ((shepherd.sa_key))

#! github_token was needed on 2023-09-05 to access PRs. Generated by using GitHub account in lastpass.
- &github_token ((github.access_token))
- &github_ssh_key ((github.ssh_key))
#! github_email and github_user added on 2023-12-07 to commit go mod bumps
- &github_email ((github.email))
- &github_user ((github.user))

#! {access_key_id,secret_access_key,aws_role_arn} are credentials generated in CloudGate
- &access_key_id ((bbr/aws_s3_creds.access_key_id))
- &secret_access_key ((bbr/aws_s3_creds.secret_access_key))
- &aws_role_arn ((bbr/aws_s3_creds.assumed_role_arn))

#! **************
#! End of secrets
#! **************

groups:
- name: test
  jobs:
  - release-env
  - merge-pr
  - run-b-drats
  - claim-env
- name: bump
  jobs:
  - bump-golang
  - bump-go-module

resource_types:
- name: shepherd
  source:
    tag: v1
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
  type: registry-image

- name: pull-request
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/concourse-resources/pr-queue-resource
    username: _json_key
    password: *gcr_viewer_key

resources:
- name: image-cryogenics-essentials
  type: registry-image
  icon: docker
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/essentials/cryo-essentials
    username: _json_key
    password: *gcr_viewer_key

- name: golang-release
  type: git
  source:
    uri: https://github.com/bosh-packages/golang-release.git
    tag_filter: v*

- name: bbr-artefacts
  type: s3
  icon: aws
  source:
    bucket: bosh-backup-and-restore-builds
    region_name: eu-west-1
    regexp: bbr-(.*)\.tar
    access_key_id: *access_key_id
    secret_access_key: *secret_access_key
    aws_role_arn: *aws_role_arn

- name: jammy-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-jammy-go_agent

- name: cryogenics-ci
  type: git
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: *github_ssh_key
    branch: main

- name: env
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: #@ data.values.tas_versions[-1]["pool_name"]

- name: b-drats
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-disaster-recovery-acceptance-tests
    private_key: *github_ssh_key
    branch: master

- name: b-drats-bump-output
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-disaster-recovery-acceptance-tests
    private_key: *github_ssh_key
    commit_filter:
      exclude:
      - ;resource comment; This resource is used exclusively for pushing new changes

- name: bosh-disaster-recovery-acceptance-tests-prs
  icon: source-pull
  type: pull-request
  source:
    base_branch: master
    repository: cloudfoundry/bosh-disaster-recovery-acceptance-tests
    access_token: *github_token
    disable_forks: true
    autosync_pr: true
    watch_checks_interval: "600"
    assign_to: "@me"

- name: daily-timer
  icon: camera-timer
  type: time

jobs:
- name: claim-env
  plan:
  - get: bosh-disaster-recovery-acceptance-tests-prs
    trigger: true
    version: every
  - put: env
    attempts: *number_of_claim_env_retries
    timeout: 6h
    params:
      action: create
      duration: 24h
      resource: env
      timeout: 6h

- name: run-b-drats
  serial: true
  plan:
  - get: env
    trigger: true
    passed:
    - claim-env
  - in_parallel:
    - get: bosh-disaster-recovery-acceptance-tests-prs
      passed:
      - claim-env
    - get: cryogenics-ci
    - get: jammy-stemcell
    - get: bbr-artefacts
      params:
        unpack: true
    - get: image-cryogenics-essentials
    #! This is here to improve the speed of running b-drats. Our env has TAS deployed. That adds 11gb of blobs to the blobstore. 
    #! the tests deploy zookeeper and do not care about TAS but the existing TAS blobs have increased runtime from ~30m to over 3h
  - task: bosh-clean-deployments
    image: image-cryogenics-essentials
    config:
      inputs:
      - name: env
      platform: linux
      run:
        args:
        - -c
        - |
          set -eu
          set -o pipefail
          source <( smith -l env/metadata bosh )
           for ds in "$(bosh ds --json | jq .Tables[].Rows[].name -r)"; do
             if [[ $ds == "" ]]; then
               continue
             else
               bosh -d $ds delete-deployment -n
             fi
           done
           bosh clean-up --all -n
        path: bash
  - in_parallel:
    - put: bosh-disaster-recovery-acceptance-tests-prs
      params:
        path: bosh-disaster-recovery-acceptance-tests-prs
        status: pending
        context: b-drats
    - task: create-b-drats-config
      image: image-cryogenics-essentials
      file: cryogenics-ci/tasks/toolsmiths/generate-b-drats-config-from-tas-env/task.yml
      input_mapping:
        repo: cryogenics-ci
        env: env
        stemcell: jammy-stemcell
      params:
        INCLUDE_DEPLOYMENT_TESTCASE: true
        INCLUDE_TRUNCATE_DB_BLOBSTORE_TESTCASE: true
        INCLUDE_CREDHUB_TESTCASE: true
        TIMEOUT_IN_MINUTES: 1_440  #! 24h as this is the lifetime of a Toolsmith env
      output_mapping:
        config: b-drats-config
    - load_var: env-metadata
      file: env/metadata
      format: json
  - task: run-b-drats
    image: image-cryogenics-essentials
    attempts: *number_of_retries
    timeout: 24h
    privileged: true
    file: bosh-disaster-recovery-acceptance-tests-prs/ci/tasks/run-b-drats/task.yml
    params:
      JUMPBOX_IP: ((.:env-metadata.ops_manager_public_ip))
      JUMPBOX_PRIVATE_KEY: ((.:env-metadata.ops_manager_private_key))
      JUMPBOX_USER: ubuntu
      BBR_BINARY: bbr-binary-release/releases/bbr
      SSH_ALIVE_INTERVAL: 60 #! in seconds
      GINKGO_TIMEOUT: 24h0m0s #! 48h to be consistent with TIMEOUT_IN_MINUTES in the b-drats test config from the previous task.
      SSHUTTLE_FLAGS: --disable-ipv6
    input_mapping:
      bbr-binary-release: bbr-artefacts
      bosh-disaster-recovery-acceptance-tests: bosh-disaster-recovery-acceptance-tests-prs
      b-drats-integration-config: b-drats-config
    on_failure:
      put: bosh-disaster-recovery-acceptance-tests-prs
      params:
        path: bosh-disaster-recovery-acceptance-tests-prs
        status: failure
        context: b-drats
    on_success:
      put: bosh-disaster-recovery-acceptance-tests-prs
      params:
        path: bosh-disaster-recovery-acceptance-tests-prs
        status: success
        context: b-drats

- name: merge-pr
  plan:
  - get: bosh-disaster-recovery-acceptance-tests-prs
    trigger: true
    passed:
    - run-b-drats
  - put: bosh-disaster-recovery-acceptance-tests-prs
    params:
      merge: true

- name: release-env
  plan:
  - get: env
    trigger: true
    passed:
    - run-b-drats
  - put: env
    params:
      resource: env
      action: release

- name: bump-golang
  serial: true
  plan:
  - in_parallel:
    - get: cryogenics-concourse-tasks
      resource: cryogenics-ci
    - get: golang-release
      trigger: true
    - get: b-drats
      params:
        branch: main
    - get: image-cryogenics-essentials
  - task: update-go-directive
    image: image-cryogenics-essentials
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: b-drats
    output_mapping:
      golang-project-repo: b-drats
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - put: b-drats-bump-output
    params:
      repository: b-drats
      branch: &golang-vendor-branch bump-golang-vendor-((.:golang-release-version))
      force: true
  #! We use `try` here to make this Job idempotent. It is possible that between
  #! 2 runs nothing has changed in the inputs (no new versions) which will result
  #! in an attempt to create a PR with nothing new. This would make this step
  #! fail.
  - try:
      task: create-golang-vendor-pull-request
      image: image-cryogenics-essentials
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params:
        BASE: master
        BRANCH: *golang-vendor-branch
        LABELS: dependencies
        TITLE: Bump golang-1-linux to version ((.:golang-release-version))
        MESSAGE: |
          This is an automatically generated Pull Request from the Cryogenics CI Bot.

          I have detected a new version of [golang-release](https://github.com/bosh-packages/golang-release) and automatically bumped
          this package to benefit from the latest changes.

          If this does not look right, please reach out to the mapbu-cryogenics team.
      input_mapping:
        source-repo: b-drats-bump-output

- name: bump-go-module
  serial: true
  plan:
  - in_parallel:
    - get: daily-timer
      trigger: true
    - get: cryogenics-concourse-tasks
      resource: cryogenics-ci
    - get: image-cryogenics-essentials
    - get: b-drats
  - task: bump
    image: image-cryogenics-essentials
    file: cryogenics-concourse-tasks/deps-automation/bump-go-module/task.yml
    input_mapping:
      source-repo: b-drats
    params:
      GIT_USERNAME: *github_user
      GIT_EMAIL: *github_email
  - try:
      load_var: go-module-update-branch
      file: destination-repo/.update-branch-name
      on_success:
        do:
        - put: b-drats-bump-output
          params:
            repository: destination-repo
            branch: &go-module-branch ((.:go-module-update-branch))
        - task: create-golang-vendor-pull-request
          image: image-cryogenics-essentials
          file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
          params:
            BASE: master
            BRANCH: *go-module-branch
            LABELS: dependencies
            TITLE: Bump go module ((.:go-module-update-branch))
            MESSAGE: |
              This is an automatically generated Pull Request from the Cryogenics CI Bot.

              I have detected a new version of a go module and automatically bumped
              it to benefit from the latest changes.

              If this does not look right, please reach out to the mapbu-cryogenics team.
          input_mapping:
            source-repo: b-drats-bump-output
